class Markets is subclass of Platform
types

public Price = real; 
public Stocks = <NASDAQ> | <NYSE> | <SPIIDNK>;
public Prices = map Stocks to Price;
public OrderInfo= Orders`OrderInfo;
public SellOrders = Orders`SellOrders;
public BuyOrders = Orders`BuyOrders;
public Order= map Orders`OrderInfo to Orders;
public CustomerId= Purse`UserId;
public Transaction::
 customer: CustomerId
 order: OrderInfo
 closePrice: Price
 diff: real
 quantity: real;

instance variables

public prices : Prices := {|->};
public sellTransaction: set of Transaction := {};
public buyTransaction : set of Transaction := {};

functions

private MakePrice: SellOrders * BuyOrders * Price -> seq of Transaction
MakePrice(sellO, buyO, price)==
if sellO= {|->} and buyO= {|->}
then []
else let idB in set dom buyO in 
      let idS in set dom sellO in
         let sellP= idS.price, buyP= idB.price in
            let updatedP= updatePrice(sellP, buyP , price), newP= checkPrice(sellP, buyP), stockS= idS.sId ,stockB= idB.sId, diff= idS.qt - idB.qt in
               let custS= sellO(idS), custB= buyO(idB), qS= idS.qt, qB= idB.qt in
                  if newP and stockS = stockB
                     then [mk_Transaction(custS, idS, updatedP, diff, qS), mk_Transaction(custB, idB, updatedP, diff, qB)]
                     else [];  

private updatePrice: real * real * Price-> real
updatePrice(sell, buy, lastP)==
let priceS= sell, priceB = buy, result= priceB - priceS
     in
       if result > 0
          then ((priceS + priceB) / 2)
          else lastP
pre lastP > 0;

private checkPrice: real * real -> bool
checkPrice(sell, buy)==
let priceS= sell, priceB = buy, result= priceB - priceS
     in
       if result > 0
          then true
          else false
pre sell > 0 and buy > 0;

operations

public CheckMarkets: SellOrders * BuyOrders * Price ==> bool
CheckMarkets(sellO, buyO, actualPrice)==
(
let aPrice = actualPrice in
   let closedOrders = MakePrice(sellO, buyO, aPrice) in
      if closedOrders = []
      then  
         return false
      else
         if closedOrders(1).diff = 0
            then 
               (
               prices := prices ++ {(hd closedOrders).order.sId |-> (hd closedOrders).closePrice};
               registerTransaction(closedOrders);
               if Platform`OrderDeleter(closedOrders(1).order) = 0
                  then if Platform`OrderDeleter(closedOrders(2).order) = 0
                           then return true
                           else return false
                  else return false;
               )
         elseif closedOrders(1).diff > 0
            then
               (
               prices := prices ++ {(hd closedOrders).order.sId |-> (hd closedOrders).closePrice};
               registerTransaction(closedOrders);
               let pSet = Platform`getPurse(closedOrders(1).customer) in
                  let pItem in set pSet in
                     if pItem.IncreaseBal(closedOrders(1).closePrice * closedOrders(2).quantity)
                        then if pItem.DecreaseAsset(closedOrders(1).order.sId, closedOrders(2).quantity)
                           then if Platform`OrderDeleter(closedOrders(2).order)= 0
                                    then return true
                                    else return false
                              else return false
                        else return false
               )
         elseif closedOrders(1).diff < 0
            then
               (
               prices := prices ++ {(hd closedOrders).order.sId |-> (hd closedOrders).closePrice};
               registerTransaction(closedOrders);
               let pSet = Platform`getPurse(closedOrders(1).customer) in
                  let pItem in set pSet in
                     if pItem.IncreaseBal(closedOrders(1).closePrice * closedOrders(1).quantity)
                        then if pItem.DecreaseAsset(closedOrders(2).order.sId, closedOrders(1).quantity)
                           then if Platform`OrderDeleter(closedOrders(1).order)= 0
                                    then return true
                                    else return false
                              else return false
                        else return false
               )
         else return false;
)
pre actualPrice > 0;

private registerTransaction: seq of Transaction ==> ()
registerTransaction(transactions)==
(
let recordSell = {transactions(1)}, recordBuy = {transactions(2)} in
   (
   sellTransaction := recordSell union sellTransaction;
   buyTransaction := recordBuy union buyTransaction;
   )
)
pre transactions(1) <> transactions(2)
post sellTransaction <> {} and buyTransaction <> {};

end Markets