class Orders is subclass of Platform

types

public CustomerId= Purse`UserId;
public OrderNo= nat1;
public StockId= Markets`Stocks;
public Quantity= real;
public Price= Markets`Price;
public OrdType = <Buy> | <Sell>;
public OrderInfo:: 
 ordId: OrderNo
 ordType: OrdType 
 sId : StockId 
 qt: Quantity 
 price: Price;
public BuyOrders = map OrderInfo to CustomerId;
public SellOrders =  map OrderInfo to CustomerId;

 
instance variables

public buyOrders: BuyOrders;
public sellOrders : SellOrders;

operations

private CreateOrderId: () ==> OrderNo
CreateOrderId() ==
 (
let tempId= MATH`rand(25) in
  if tempId > 0 and forall x in set dom buyOrders & tempId <> x.ordId  
    then 
      return tempId
    else 
      CreateOrderId();
 );
 
public SendOrder: CustomerId * StockId * OrdType * real * Price ==> bool
SendOrder(cId, stock, type, qt, pr) ==
(
let id = CreateOrderId() in
  let orderI = mk_OrderInfo(id, type, stock, qt, pr) in
    if id= 0
      then return false
      else 
        cases type:
          <Buy> -> MapBuyOrder(orderI, cId), 
          <Sell> -> MapSellOrder(orderI, cId)
          end;
        return true;
)
pre qt > 0 and pr > 0;

private MapBuyOrder: OrderInfo * CustomerId ==> ()
MapBuyOrder(orderMap, id)==
  buyOrders := {orderMap |-> id} munion buyOrders
pre orderMap in set dom buyOrders;

private MapSellOrder: OrderInfo * CustomerId ==> ()
MapSellOrder(orderMap, id)==
  sellOrders := {orderMap |-> id} munion sellOrders
pre orderMap in set dom sellOrders;

public DeleteOrder: OrderInfo ==> bool
DeleteOrder(info) ==
(
let orType = info.ordType in
      if orType = <Buy>
        then return DeleteBuyOrder(info)
        else return DeleteSellOrder(info)
)
pre info in set dom buyOrders or info in set dom sellOrders;

private DeleteBuyOrder: OrderInfo ==> bool
DeleteBuyOrder(orderMap)==
(
  buyOrders := {orderMap}  <-:  buyOrders;
  return true;
)
pre orderMap in set dom buyOrders;

private DeleteSellOrder: OrderInfo ==> bool
DeleteSellOrder(orderMap)==
(
  sellOrders := {orderMap}  <-:  sellOrders;
  return true;
)
pre orderMap in set dom buyOrders;

public Orders: BuyOrders * SellOrders ==> Orders
Orders(buyO,sellO) ==
(
buyOrders := buyO;
sellOrders := sellO;
) 

end Orders