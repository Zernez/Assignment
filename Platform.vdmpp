class Platform

types

private Purses= set of Purse;
private Name = seq of char;
private Surname = seq of char; 
private Sex = <Woman> | <Man> | <Indefinite>;
private DateBirth = nat;
private Nationality= seq of char;
private Country = seq of char;
private Address = seq of char;
private Customer= Markets`CustomerId;
private Stock= Markets`Stocks;

public AccountId = nat1;

instance variables

private purses : Purses := {};

operations

protected OrderSender: Orders`CustomerId * Orders`StockId * Orders`OrdType * real * Orders`Stocks ==> bool
OrderSender(cId, stock, type, qt, stName) ==
(
dcl purse: Purse,
    price: Orders`Price;

purse := {x | x in set purses & x.purseId= cId};
price := prices(stName);
if purse.DecreaseBal(price * qt)
    then if purse.IncreaseAsset(stock, qt)
        then if Orders`SendOrder(cId, stock, type, qt, price)
               then return true;
)
pre {x | x in set purses & x.purseId= cId} <> {};

protected OrderDeleter: Orders`OrderInfo ==> ()
OrderDeleter(info) ==
(
dcl purse: Purse,
    price: Orders`Price;

purse := {x | x in set purses & x.purseId= buyOrders(info)};
price := prices(info.sId);
purse.IncreaseBal(price * info.qt);
purse.DecreaseAsset(info.sId , info.qt);
Orders`DeleteOrder(info);
)
pre {x | x in set purses & x.purseId= cId} <> {};

protected Deposit: Name * Surname * Purse`PurseAccount * real ==> bool
Deposit(nam, sur, purse, amount) ==
(
dcl purseId: Purse`UserId,
    purse: Purse;

purseId := purse.id;
purse := {x | x in set purses & x.user.name= nam and x.user.surname= sur and x.purseId= purseId};
if purse= {}
    then return false
    else purse := purse.IncreaseBal(amount);
         return true;
)
pre {x | x in set purses & x.user.name= nam and x.user.surname= sur and x.purseId= purseId} <> {};

protected Withdraw: Name * Surname * Purse`PurseAccount * real ==> bool
Withdraw(nam, sur, purse, amount) ==
(
dcl purseId: Purse`UserId,
    purse: Purse;

purseId := purse.id;
purse := {x | x in set purses & x.user.name= nam and x.user.surname= sur and x.purseId= purseId};
if purse= {}
    then 
        return false
    else 
        purse := purse.DecreaseBal(amount);
        return true;
)
pre {x | x in set purses & x.user.name= nam and x.user.surname= sur and x.purseId= purseId} <> {};

protected CreateUser: Name * Surname * Sex * DateBirth * Nationality * Country * Address ==> bool
CreateUser(nam, sur, s , db, nation, c, addr) ==
(
dcl wallet : set of Purse,
    id : IdUser;

id := CreateId();

wallet := {new Purse(
                    id,
                    nam,
                    sur,
                    s,
                    db,
                    nation,
                    c,
                    addr)};
purses := wallet union purses;   
);

protected DeleteUser: Name * Surname * Purse`PurseAccount ==> bool
DeleteUser(nam, sur, purse) ==
(
dcl purseId: Purse`UserId,
    purseCheck: Purse;

purseId := purse.id;
purseCheck := {x | x in set purses & x.user.name= nam and x.user.surname= sur and x.purseId= purseId};
if purseCheck= {}
    then 
        return false
    else 
        purses := purses \ purseCheck;
        return true;
);

protected CreateId: () ==> AccountId
CreateId() ==
(  
  dcl tempId : AccountId;

  tempId := MATH`rand(36);

  if tempId > 0 and forall x in set purses & tempId <> x.ordId  
    then 
        return tempId
    else 
        CreateOrderId();
);

end Platform