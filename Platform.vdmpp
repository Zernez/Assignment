class Platform

types

public Purses= set of Purse;
public Order= Orders;
public Name = seq of char;
public Surname = seq of char; 
public Sex = <Woman> | <Man> | <Indefinite>;
public DateBirth = nat;
public Nationality= seq of char;
public Country = seq of char;
public Address = seq of char;
public Stock= Markets`Stocks;

public AccountId = nat1;

instance variables

private purses : Purses := {};
public order : Order := new Orders({|->},{|->});
    
operations

public getPurse: AccountId ==> set of Purse
getPurse(cId) ==
return {x | x in set purses & x.purse.id= cId};

public OrderSender: Orders`CustomerId * Orders`StockId * Orders`OrdType * real ==> int
OrderSender(cId, stock, type, qt) ==
(
let purseItem = getPurse(cId), price = Markets`prices(stock) in 
    let p in set purseItem in 
        if p.DecreaseBal(price * qt)
            then if p.IncreaseAsset(stock, qt)
                then if order.SendOrder(cId, stock, type, qt, price)
                    then return 0
                    else return 3
            else return 2
        else return 1;
)
pre {x | x in set purses & x.purse.id= cId} <> {};

public OrderDeleter: Orders`OrderInfo ==> int
OrderDeleter(info) ==
(
let purseItem = getPurse(info.ordId), price = Markets`prices(info.sId) in 
    let p in set purseItem in
        if p.IncreaseBal(price * info.qt)
            then if p.DecreaseAsset(info.sId , info.qt)
                then if order.DeleteOrder(info)
                     then return 0
                     else return 3  
            else return 2
        else return 1;    
)
pre {x | x in set purses & x.purse.id= info.ordId} <> {};

public Deposit: Name * Surname * Purse`PurseAccount * real ==> bool
Deposit(nam, sur, purse, amount) ==
(
let purseId = purse.id in 
    let purseItem = {x | x in set purses & x.purse.user.account.name = nam and x.purse.user.account.surname= sur and x.purse.id= purseId} in
        let p in set purseItem in 
            if purse.id = 0
                then return false
                else if p.IncreaseBal(amount)
                        then return true
                        else return false;
)
pre {x | x in set purses & x.purse.user.account.name = nam and x.purse.user.account.surname = sur and x.purse.id= purse.id} <> {};

public Withdraw: Name * Surname * Purse`PurseAccount * real ==> bool
Withdraw(nam, sur, purse, amount) ==
(
let purseId = purse.id in 
    let purseItem = {x | x in set purses & x.purse.user.account.name = nam and x.purse.user.account.surname= sur and x.purse.id= purseId} in
        let p in set purseItem in 
            if purse.id = 0
                then return false
                else if p.DecreaseBal(amount)
                        then return true
                        else return false;
)
pre {x | x in set purses & x.purse.user.account.name = nam and x.purse.user.account.surname = sur and x.purse.id = purse.id} <> {};

public CreateUser: Name * Surname * Sex * DateBirth * Nationality * Country * Address ==> ()
CreateUser(nam, sur, s , db, nation, c, addr) ==
(
dcl wallet : set of Purse,
    id : AccountId;

id := CreateId();

wallet := {new Purse(
                    id,
                    nam,
                    sur,
                    s,
                    db,
                    nation,
                    c,
                    addr)};
purses := wallet union purses;   
);

public DeleteUser: Name * Surname * Purse`PurseAccount ==> bool
DeleteUser(nam, sur, purse) ==
(
let purseId = purse.id in 
    let purseCheck = {x | x in set purses & x.purse.user.account.name= nam and x.purse.user.account.surname = sur and x.purse.id = purseId} in
        if purseCheck= {}
            then 
                return false
            else 
                purses := purses \ purseCheck;
                return true;
);

public CreateId: () ==> AccountId
CreateId() ==
(  
let tempId = MATH`rand(36) in
  if tempId > 0 and forall x in set purses & tempId <> x.purse.id  
    then 
        return tempId
    else 
        CreateId();
);

end Platform
